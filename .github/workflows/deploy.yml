name: Test and Deploy to Uberspace

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test and Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: horologium.uberspace.de
          username: kasunshi
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            set -e

            echo ">>> Adding ~/bin to PATH..."
            export PATH=$PATH:~/bin

            # Globaler Node-Memory-Limit für alle nachfolgenden Prozesse
            export NODE_OPTIONS="--max-old-space-size=1024"

            # Verzeichnisdefinitionen
            PROD_DIR=~/html/sunshine-cbd
            TEMP_DIR=~/html/sunshine-cbd_temp
            BACKUP_DIR=~/html/sunshine-cbd_backup

            echo ">>> Stoppe die aktuell laufende Produktion (PM2)..."
            pm2 stop all || true
            pm2 delete all || true

            echo ">>> Erstelle temporäres Verzeichnis..."
            rm -rf $TEMP_DIR
            mkdir -p $TEMP_DIR

            echo ">>> Synchronisiere aktuellen Produktionsstand in TEMP_DIR..."
            rsync -a --delete $PROD_DIR/ $TEMP_DIR/

            echo ">>> Aktualisiere Code in TEMP_DIR (git pull)..."
            cd $TEMP_DIR
            git pull origin dev

            echo ">>> Installiere Abhängigkeiten in TEMP_DIR..."
            npm install

            echo ">>> Starte Dev-Server in TEMP_DIR für die Tests..."
            npm run dev &
            DEV_PID=$!

            echo ">>> Warte, bis der Dev-Server erreichbar ist..."
            npx wait-on http://localhost:45620 --timeout 60000

            echo ">>> Führe Tests aus (npm run ci:all) in TEMP_DIR..."
            npm run ci:all
            TEST_RESULT=$?

            echo ">>> Stoppe den Dev-Server..."
            kill $DEV_PID || true

            if [ $TEST_RESULT -ne 0 ]; then
              echo ">>> Tests fehlgeschlagen. Behalte die bestehende Produktionsversion."
              cd $PROD_DIR
              pm2 start "npm start" --name sunshine-cbd
              rm -rf $TEMP_DIR
              exit 1
            fi

            echo ">>> Tests erfolgreich. Starte Build in TEMP_DIR (wiederholen bis Erfolg)..."
            until npm run build --verbose; do
              echo "Build in TEMP_DIR fehlgeschlagen, versuche in 5 Sekunden erneut..."
              sleep 5
            done

            echo ">>> Backup der aktuellen Produktion wird erstellt..."
            rm -rf $BACKUP_DIR
            cp -R $PROD_DIR $BACKUP_DIR

            echo ">>> Neue Version aus TEMP_DIR wird in Produktion deployt..."
            rsync -av --delete $TEMP_DIR/ $PROD_DIR/

            echo ">>> Installiere Abhängigkeiten in PROD_DIR..."
            cd $PROD_DIR
            npm install

            echo ">>> Führe Produktions-Build in PROD_DIR aus (wiederholen bis Erfolg)..."
            until npm run build --verbose; do
              echo "Produktions-Build fehlgeschlagen, versuche in 5 Sekunden erneut..."
              sleep 5
            done

            echo ">>> Starte die Produktionsversion via PM2..."
            pm2 start "npm start" --name sunshine-cbd

            echo ">>> Deployment abgeschlossen!"
            rm -rf $TEMP_DIR
            rm -rf $BACKUP_DIR
